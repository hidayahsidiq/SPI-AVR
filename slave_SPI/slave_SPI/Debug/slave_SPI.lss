
slave_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000326  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e39  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092b  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f6  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c8  00000000  00000000  00002a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000300a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  7a:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	ab 9a       	sbi	0x15, 3	; 21
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	ab 98       	cbi	0x15, 3	; 21
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
  8e:	66 23       	and	r22, r22
  90:	11 f0       	breq	.+4      	; 0x96 <lcd_write+0xc>
  92:	97 9a       	sbi	0x12, 7	; 18
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write+0xe>
  96:	97 98       	cbi	0x12, 7	; 18
  98:	aa 98       	cbi	0x15, 2	; 21
  9a:	a4 9a       	sbi	0x14, 4	; 20
  9c:	a5 9a       	sbi	0x14, 5	; 20
  9e:	a6 9a       	sbi	0x14, 6	; 20
  a0:	a7 9a       	sbi	0x14, 7	; 20
  a2:	af 98       	cbi	0x15, 7	; 21
  a4:	ae 98       	cbi	0x15, 6	; 21
  a6:	ad 98       	cbi	0x15, 5	; 21
  a8:	ac 98       	cbi	0x15, 4	; 21
  aa:	cc 23       	and	r28, r28
  ac:	0c f4       	brge	.+2      	; 0xb0 <lcd_write+0x26>
  ae:	af 9a       	sbi	0x15, 7	; 21
  b0:	c6 fd       	sbrc	r28, 6
  b2:	ae 9a       	sbi	0x15, 6	; 21
  b4:	c5 fd       	sbrc	r28, 5
  b6:	ad 9a       	sbi	0x15, 5	; 21
  b8:	c4 fd       	sbrc	r28, 4
  ba:	ac 9a       	sbi	0x15, 4	; 21
  bc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c0:	af 98       	cbi	0x15, 7	; 21
  c2:	ae 98       	cbi	0x15, 6	; 21
  c4:	ad 98       	cbi	0x15, 5	; 21
  c6:	ac 98       	cbi	0x15, 4	; 21
  c8:	c3 fd       	sbrc	r28, 3
  ca:	af 9a       	sbi	0x15, 7	; 21
  cc:	c2 fd       	sbrc	r28, 2
  ce:	ae 9a       	sbi	0x15, 6	; 21
  d0:	c1 fd       	sbrc	r28, 1
  d2:	ad 9a       	sbi	0x15, 5	; 21
  d4:	c0 fd       	sbrc	r28, 0
  d6:	ac 9a       	sbi	0x15, 4	; 21
  d8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  dc:	ac 9a       	sbi	0x15, 4	; 21
  de:	ad 9a       	sbi	0x15, 5	; 21
  e0:	ae 9a       	sbi	0x15, 6	; 21
  e2:	af 9a       	sbi	0x15, 7	; 21
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_read>:
  e8:	88 23       	and	r24, r24
  ea:	11 f0       	breq	.+4      	; 0xf0 <lcd_read+0x8>
  ec:	97 9a       	sbi	0x12, 7	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0xa>
  f0:	97 98       	cbi	0x12, 7	; 18
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	a4 98       	cbi	0x14, 4	; 20
  f6:	a5 98       	cbi	0x14, 5	; 20
  f8:	a6 98       	cbi	0x14, 6	; 20
  fa:	a7 98       	cbi	0x14, 7	; 20
  fc:	ab 9a       	sbi	0x15, 3	; 21
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x18>
 100:	9c 9b       	sbis	0x13, 4	; 19
 102:	02 c0       	rjmp	.+4      	; 0x108 <lcd_read+0x20>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0x22>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	9d 99       	sbic	0x13, 5	; 19
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	9e 99       	sbic	0x13, 6	; 19
 110:	80 64       	ori	r24, 0x40	; 64
 112:	9f 99       	sbic	0x13, 7	; 19
 114:	80 68       	ori	r24, 0x80	; 128
 116:	ab 98       	cbi	0x15, 3	; 21
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_read+0x32>
 11a:	ab 9a       	sbi	0x15, 3	; 21
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x36>
 11e:	9c 99       	sbic	0x13, 4	; 19
 120:	81 60       	ori	r24, 0x01	; 1
 122:	9d 99       	sbic	0x13, 5	; 19
 124:	82 60       	ori	r24, 0x02	; 2
 126:	9e 99       	sbic	0x13, 6	; 19
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	9f 99       	sbic	0x13, 7	; 19
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	ab 98       	cbi	0x15, 3	; 21
 130:	08 95       	ret

00000132 <lcd_waitbusy>:
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 138:	88 23       	and	r24, r24
 13a:	dc f3       	brlt	.-10     	; 0x132 <lcd_waitbusy>
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_waitbusy+0xe>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 14a:	08 95       	ret

0000014c <lcd_command>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <lcd_gotoxy>:
 160:	61 11       	cpse	r22, r1
 162:	04 c0       	rjmp	.+8      	; 0x16c <lcd_gotoxy+0xc>
 164:	80 58       	subi	r24, 0x80	; 128
 166:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 16a:	08 95       	ret
 16c:	80 54       	subi	r24, 0x40	; 64
 16e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 172:	08 95       	ret

00000174 <lcd_clrscr>:
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 17a:	08 95       	ret

0000017c <lcd_home>:
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 182:	08 95       	ret

00000184 <lcd_putc>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 18c:	ca 30       	cpi	r28, 0x0A	; 10
 18e:	49 f4       	brne	.+18     	; 0x1a2 <lcd_putc+0x1e>
 190:	80 34       	cpi	r24, 0x40	; 64
 192:	10 f0       	brcs	.+4      	; 0x198 <lcd_putc+0x14>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	01 c0       	rjmp	.+2      	; 0x19a <lcd_putc+0x16>
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	80 58       	subi	r24, 0x80	; 128
 19c:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <lcd_putc+0x26>
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_puts>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	fc 01       	movw	r30, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <lcd_puts+0x1a>
 1be:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_putc>
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fb cf       	rjmp	.-10     	; 0x1be <lcd_puts+0x10>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d6:	8f 9a       	sbi	0x11, 7	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d8:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1da:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1dc:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1de:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e0:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e2:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	9a ef       	ldi	r25, 0xFA	; 250
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ec:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ee:	ac 9a       	sbi	0x15, 4	; 21
    lcd_e_toggle();
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	9e e4       	ldi	r25, 0x4E	; 78
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	ce 01       	movw	r24, r28
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 20a:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20e:	ce 01       	movw	r24, r28
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 214:	ac 98       	cbi	0x15, 4	; 21
    lcd_e_toggle();
 216:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21a:	21 97       	sbiw	r28, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 22a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 234:	81 2f       	mov	r24, r17
 236:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>

}/* lcd_init */
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	08 95       	ret

00000242 <spi_init_slave>:
unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                                  //Load data into buffer
	while(!(SPSR)&(1<<SPIF));                     //Wait until transmission complete
	return(SPDR);                                 //Return received data
}
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	87 bb       	out	0x17, r24	; 23
 246:	8d b9       	out	0x0d, r24	; 13
 248:	08 95       	ret

0000024a <main>:

int main(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	2a 97       	sbiw	r28, 0x0a	; 10
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);           //Initialize LCD
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_init>
	spi_init_slave();                             //Initialize slave SPI
 264:	0e 94 21 01 	call	0x242	; 0x242 <spi_init_slave>
	
	unsigned char data, buffer[10];
	
	DDRA  = 0x00;                                 //Initialize PORTA as INPUT
 268:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;                                 //Enable Pull-Up Resistors
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	8b bb       	out	0x1b, r24	; 27
}

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                                  //Load data into buffer
 26e:	1e e7       	ldi	r17, 0x7E	; 126
	DDRA  = 0x00;                                 //Initialize PORTA as INPUT
	PORTA = 0xFF;                                 //Enable Pull-Up Resistors
	
	while(1)
	{
		lcd_clrscr();                             //LCD Clear screen
 270:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_clrscr>
		lcd_home();                               //LCD move cursor to home
 274:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_home>
		lcd_puts("Testing");
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
		lcd_gotoxy(0,1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_gotoxy>
}

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                                  //Load data into buffer
 288:	1f b9       	out	0x0f, r17	; 15
	while(!(SPSR)&(1<<SPIF));                     //Wait until transmission complete
 28a:	8e b1       	in	r24, 0x0e	; 14
	return(SPDR);                                 //Return received data
 28c:	8f b1       	in	r24, 0x0f	; 15
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28e:	4a e0       	ldi	r20, 0x0A	; 10
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__itoa_ncheck>
		lcd_home();                               //LCD move cursor to home
		lcd_puts("Testing");
		lcd_gotoxy(0,1);
		data = spi_tranceiver(ACK);               //Receive data, send ACK
		itoa(data, buffer, 10);                   //Convert integer into string
		lcd_puts(buffer);                         //Display received data
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 ef       	ldi	r24, 0xF9	; 249
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x60>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x6a>
 2b4:	00 00       	nop
 2b6:	dc cf       	rjmp	.-72     	; 0x270 <main+0x26>

000002b8 <__itoa_ncheck>:
 2b8:	bb 27       	eor	r27, r27
 2ba:	4a 30       	cpi	r20, 0x0A	; 10
 2bc:	31 f4       	brne	.+12     	; 0x2ca <__itoa_ncheck+0x12>
 2be:	99 23       	and	r25, r25
 2c0:	22 f4       	brpl	.+8      	; 0x2ca <__itoa_ncheck+0x12>
 2c2:	bd e2       	ldi	r27, 0x2D	; 45
 2c4:	90 95       	com	r25
 2c6:	81 95       	neg	r24
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__utoa_common>

000002ce <__utoa_ncheck>:
 2ce:	bb 27       	eor	r27, r27

000002d0 <__utoa_common>:
 2d0:	fb 01       	movw	r30, r22
 2d2:	55 27       	eor	r21, r21
 2d4:	aa 27       	eor	r26, r26
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	aa 1f       	adc	r26, r26
 2dc:	a4 17       	cp	r26, r20
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__utoa_common+0x14>
 2e0:	a4 1b       	sub	r26, r20
 2e2:	83 95       	inc	r24
 2e4:	50 51       	subi	r21, 0x10	; 16
 2e6:	b9 f7       	brne	.-18     	; 0x2d6 <__utoa_common+0x6>
 2e8:	a0 5d       	subi	r26, 0xD0	; 208
 2ea:	aa 33       	cpi	r26, 0x3A	; 58
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__utoa_common+0x20>
 2ee:	a9 5d       	subi	r26, 0xD9	; 217
 2f0:	a1 93       	st	Z+, r26
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <__utoa_common+0x4>
 2f6:	b1 11       	cpse	r27, r1
 2f8:	b1 93       	st	Z+, r27
 2fa:	11 92       	st	Z+, r1
 2fc:	cb 01       	movw	r24, r22
 2fe:	0c 94 81 01 	jmp	0x302	; 0x302 <strrev>

00000302 <strrev>:
 302:	dc 01       	movw	r26, r24
 304:	fc 01       	movw	r30, r24
 306:	67 2f       	mov	r22, r23
 308:	71 91       	ld	r23, Z+
 30a:	77 23       	and	r23, r23
 30c:	e1 f7       	brne	.-8      	; 0x306 <strrev+0x4>
 30e:	32 97       	sbiw	r30, 0x02	; 2
 310:	04 c0       	rjmp	.+8      	; 0x31a <strrev+0x18>
 312:	7c 91       	ld	r23, X
 314:	6d 93       	st	X+, r22
 316:	70 83       	st	Z, r23
 318:	62 91       	ld	r22, -Z
 31a:	ae 17       	cp	r26, r30
 31c:	bf 07       	cpc	r27, r31
 31e:	c8 f3       	brcs	.-14     	; 0x312 <strrev+0x10>
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
